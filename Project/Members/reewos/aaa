Diseño del experimento:En este proyecto, para obtener un algoritmo eficiente para obtener de manera aleatoria la mediana de un conjunto de datos desordenados, se debe tener algunos conceptos previos para poder entender y posteriormente desarrollar un código.Los conceptos a desarrollar son: Algoritmos de búsqueda, Algoritmos de ordenamiento, Algoritmos aleatorios.	Algoritmos de búsquedaUn algoritmo de búsqueda se encarga de, a partir de una serie de criterios, encontrar un determinado elemento dentro de un conjunto de datos. Dentro de los más conocidos y más utilizados están:	Búsqueda secuencial: Para encontrar un elemento en un conjunto estructurado, se analiza elemento por elemento hasta encontrar con aquel elemento solicitado. Tiene un tiempo, en el peor caso, de O(n).	Búsqueda binaria: En este caso, el conjunto de elementos debe estar ordenado de modo que se compara con el elemento medio si es menor(izquierda), mayor(derecha) e igual (devuelve el valor), y se repite el proceso reduciendo la cantidad de datos. Tiene un tiempo, en el peor caso, de O(log2n).	Algoritmo de ordenamientoUn algoritmo de ordenamiento se encarga de comparar todos los elementos y colocarlos en un orden, mediante algún método (intercambio, mezcla, partición, etc.). Los algoritmos más utilizados son: (Cormen. 30-31, 148-150, 170-174)	Ordenamiento de burbuja (Bubble Sort): Este algoritmo funciona comparando cada elemento de la lista con el siguiente e intercambiando si es que el elemento comparado es menor. Tiene como complejidad O(n2).	Ordenamiento por mezcla (Merge Sort): Este algoritmo funciona dividiendo en la mitad recursivamente en una cantidad de elementos, cuando son pequeñas cantidades se procede a ordenarlos y agruparlos, de manera progresiva hasta su totalidad. Tiene complejidad O(nlog2n).	Ordenamiento rápido (Quick Sort): Este algoritmo funciona utilizando un pivote, el cual tiene la función de comparar y particionar el conjunto de datos entre menores y mayores que el pivote, este procedimiento se repite en las dos particiones y así sucesivamente. Tiene complejidad O(nlog2n). Es uno de los algoritmos más rápidos, por tal motivo se tiene pensado utilizar este algoritmo para lograr el objetivo de este proyecto.	Algoritmos aleatoriosLos algoritmos aleatorios son aquellos que utilizan en alguna parte de su estructura números aleatorios, con el fin de lograr las mismas posibilidades frente a cualquier caso. Es entonces, enfocado a nuestro proyecto, necesario utilizar la aleatoriedad para obtener una mejor probabilidad.Por lo expuesto, se procede a elaborar un seudocódigo para hallar la mediana de manera aleatoria con la idea de poder transcribirlo a cualquier lenguaje de programación, en nuestro caso en lenguaje R. Para hallar la mediana de un conjunto de datos, se deben de utilizar un algoritmo de ordenamiento y de búsqueda, ya que no se sabe si el conjunto de datos está ordenado. Para ello se analiza primero los algoritmos de búsqueda. Aplicado a nuestro objetivo sería ineficiente buscar secuencialmente la mediana, ya que no necesitamos recorrer toda la cadena para hallarlo, aun peor cuando no está ordenado. Igualmente pasaría con un algoritmo de búsqueda binaria, ya que de estar ordenado tan solo se necesitaría devolver. Entonces, es necesario implementar algún algoritmo de ordenamiento.Como se presentó anteriormente, existen diferentes tipos de algoritmos de ordenamiento. Para escoger el más indicado se debe tomar en cuenta el tiempo de ejecución, es decir cuánto tiempo demora en ordenar todo el conjunto de datos. Para ello se utiliza la gran O como determinante para el análisis de los tiempos. Se tiene algoritmos de ordenamiento en O(n2), O(nlogn) y hasta O(n). Sin embargo, no es necesario ordenarlo todo para hallarlo. Para ello se podría ordenar hasta n/2 de forma secuencial sin problema alguno y el resto dejarlo tal como estaba. Podría ser una solución buena, pero se puede mejorar aún más. Si analizamos la estructura del Quicksort, nos puede ayudar en la búsqueda de la mediana, el cual cuenta con dos funciones:*La función ‘PARTICION’ tiene como entrada A, p y r. A es una cadena de elementos de tamaño n, p es la posición inicial relativa y r es una posición final relativa. La función se encarga de seleccionar un pivote, el cual es el último elemento en la cadena, en donde se una separación de los números en comparación con el pivote, donde los menores irán a la izquierda y los mayores a la derecha. Por último, el pivote intercambia de posición con el primer mayor encontrado, y devuelve esa posición.Algoritmo 1: PARTITION(A,p,r)1 x=A[r]2 i=p-13 for j=p to r-1 do4 if A[j] ≤ x then5 i=i+16 exchange A[i] with A[j]7 exchange A[i+1] with A[r]8 return i+1(Extraído de Cormen. Algoritmos. 171)*La función QUICKSORT tiene las mismas entradas que la función anterior es realizar el proceso anterior de manera recursiva, es decir realizando el mismo proceso una vez subdivida la cadena inicial por el pivote (parte menor y parte mayor).Algoritmo 2: QUICKSORT(A,p,r)1 if p<r then2 q=PARTITION(A,p,r)3 QUICKSORT(A,p,q-1)4 QUICKSORT(A,q+1,r)(Extraído de Cormen. Algoritmos. 171)Lo importante a resaltar es que el algortimo QuickSort tiene O(nlogn) como tiempo promedio y que es el más rápido en comparación con los otros algoritmos de igual complejidad, pero tiene O(n2) en el peor de los casos. Esto hace de que tenga una gran desventaja. Para ello se utiliza la aleatorización con el propósito de evitar que se presente el peor caso. En ese sentido lo que se hará es seleccionar de manera aleatoria el pivote. Esto realiza con la siguiente función:Algoritmo 3: RANDOM_PARTITION(A,p,r)1 i=RANDOM(p,r)2 exchange A[r] with A[i]3 return PARTITION(A,p,r)(Extraído de Cormen. Algoritmos. 179)En consecuencia:Algoritmo 4: RANDOM_QUICKSORT(A,p,r)1 if p<r then2 q=RANDOM_PARTITION(A,p,r)3 RANDOM_QUICKSORT(A,p,q-1)4 RANDOM_QUICKSORT(A,q+1,r)(Extraído de Cormen. Algoritmos. 179)Como ya se había mencionado, se puede mejorar aún más el resultado. Por ello, se utiliza una variación del QuickSort el cual es QuickSelection.El QuickSelection tiene como entradas A,p,r e i, donde i es la posición que estamos buscando (mediana). Lo primero que hace es comparar si p y r son iguales, es decir el tamaño es 1, y procede a devolver único número. Luego utiliza la función ‘PARTITION’ al igual que en el QuickSort y coloca en q la posición del pivote. Luego se crea una variable k, la cual es la posición central obtenida por ‘PARTITION’, y se compara con i, que en este caso es la mediana o n/2. Si lo es devuelve el resultado, de lo contrario hará una comparación. Si k es mayor a la posición central, realizará una recursión para el lado izquierdo, sino lo hará al lado derecho.Algoritmo 5: QUICK_SELECT(A,p,r,i)1 if p==r then2 return A[p]3 q= PARTITION(A,p,r)4 k=q-p+15 if i==k then6 return A[q]7 else if i<k then8 return QUICK_SELECT(A,p,q-1,i) 9 else return QUICK_SELECT(A,q+1,r,i-k) Utilizando la aleatorización para mejorar el rendimiento del algoritmo:Algoritmo 6: RANDOM_QUICK_SELECT(A,p,r,i)1 if p==r then2 return A[p]3 q= RANDOM_PARTITION(A,p,r)4 k=q-p+15 if i==k then6 return A[q]7 else if i<k then8 return RANDOM_QUICK_SELECT(A,p,q-1,i) 9 else return RANDOM_QUICK_SELECT(A,q+1,r,i-k) (Extraído de Cormen. Algoritmos. 216)Frente a esto tenemos que el algoritmo es mucho más eficiente y rápido al tratar de hallar la mediana que anteriormente, llegando inclusive a una ejecución de tiempo O(n), ya que no utiliza la otra división restante ni llega a completar todo el ordenamiento.https://arxiv.org/pdf/1706.00841.pdfhttps://www.youtube.com/watch?v=jLPCdDp_LE0

https://www.microsoft.com/en-us/research/uploads/prod/2016/12/How-to-Present-a-Paper.pdf

https://gist.github.com/carlosal1015/38a0fbd049507cbddb073e55807bfa03